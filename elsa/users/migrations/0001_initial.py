# Generated by Django 4.0.5 on 2022-07-05 20:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('psychology', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('memberships', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('MA', 'Male'), ('FE', 'Female')], default='MA', max_length=2)),
                ('height', models.FloatField(blank=True, help_text='Customer height in centimeters', null=True)),
                ('weight', models.FloatField(blank=True, help_text='Customer weight in kilograms', null=True)),
                ('weight_goal', models.FloatField(blank=True, null=True)),
                ('diet', models.CharField(choices=[('RG', 'Regular'), ('VE', 'Vegetarian'), ('VG', 'Vegan')], default='RG', max_length=2)),
                ('sports_level', models.CharField(choices=[('BG', 'Beginner'), ('IM', 'Intermediate'), ('AV', 'Advanced')], default='BG', max_length=2)),
                ('sports_goal', models.CharField(choices=[('PM', 'Performance'), ('HS', 'Health / Social')], default='HS', max_length=2)),
                ('weekly_training', models.CharField(choices=[('T1', 'Between 1-2 times weekly'), ('T2', 'Between 3-4 times weekly'), ('T3', 'Between 4-5 times weekly'), ('T4', 'More than 5 times weekly')], default='T1', max_length=2)),
                ('hourly_training', models.CharField(choices=[('T1', 'Less than 1 hour daily'), ('T2', 'Between 1-2 hours daily'), ('T3', 'Between 3-4 hours daily'), ('T4', 'Between 4-5 hours daily'), ('T5', 'More than 5 hours daily')], default='T1', max_length=2)),
                ('body_type', models.CharField(choices=[('EC', 'Ectomorph'), ('ME', 'Mesomorph'), ('EN', 'Endomorph')], default='EC', max_length=2)),
                ('body_goal', models.CharField(choices=[('LW', 'Lose weight'), ('MW', 'Maintain weight'), ('GM', 'Gain muscle')], default='LW', max_length=2)),
                ('training_start', models.DateField(blank=True, null=True)),
                ('update_info', models.BooleanField(default=False)),
                ('borgh_historial', models.ManyToManyField(through='psychology.BorghSummary', to='psychology.borgheffortscale')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('membership', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='memberships.membership')),
                ('used_coupons', models.ManyToManyField(through='memberships.CouponToUser', to='memberships.coupon')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
